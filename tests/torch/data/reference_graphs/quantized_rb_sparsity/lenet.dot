strict digraph  {
"0 /nncf_model_input_0" [id=0, type=nncf_model_input];
"1 SymmetricQuantizer/symmetric_quantize_0" [id=1, type=symmetric_quantize];
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=2, type=calc_rb_binary_mask];
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=3, type=apply_binary_mask];
"4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=4, type=symmetric_quantize];
"5 LeNet/NNCFConv2d[conv1]/conv2d_0" [id=5, type=conv2d];
"6 LeNet/relu_0" [id=6, type=relu];
"7 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_0|OUTPUT]/symmetric_quantize_0" [id=7, type=symmetric_quantize];
"8 LeNet/max_pool2d_0" [id=8, type=max_pool2d];
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=9, type=calc_rb_binary_mask];
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=10, type=apply_binary_mask];
"11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=11, type=symmetric_quantize];
"12 LeNet/NNCFConv2d[conv2]/conv2d_0" [id=12, type=conv2d];
"13 LeNet/relu_1" [id=13, type=relu];
"14 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_1|OUTPUT]/symmetric_quantize_0" [id=14, type=symmetric_quantize];
"15 LeNet/max_pool2d_1" [id=15, type=max_pool2d];
"16 LeNet/view_0" [id=16, type=view];
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=17, type=calc_rb_binary_mask];
"18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=18, type=apply_binary_mask];
"19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=19, type=symmetric_quantize];
"20 LeNet/NNCFLinear[fc1]/linear_0" [id=20, type=linear];
"21 LeNet/relu_2" [id=21, type=relu];
"22 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_2|OUTPUT]/symmetric_quantize_0" [id=22, type=symmetric_quantize];
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=23, type=calc_rb_binary_mask];
"24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=24, type=apply_binary_mask];
"25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=25, type=symmetric_quantize];
"26 LeNet/NNCFLinear[fc2]/linear_0" [id=26, type=linear];
"27 LeNet/relu_3" [id=27, type=relu];
"28 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_3|OUTPUT]/symmetric_quantize_0" [id=28, type=symmetric_quantize];
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=29, type=calc_rb_binary_mask];
"30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=30, type=apply_binary_mask];
"31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=31, type=symmetric_quantize];
"32 LeNet/NNCFLinear[fc3]/linear_0" [id=32, type=linear];
"33 /nncf_model_output_0" [id=33, type=nncf_model_output];
"0 /nncf_model_input_0" -> "1 SymmetricQuantizer/symmetric_quantize_0"  [label="shape:(1, 3, 32, 32)\nports:0 -> 0", style=solid];
"1 SymmetricQuantizer/symmetric_quantize_0" -> "5 LeNet/NNCFConv2d[conv1]/conv2d_0"  [label="shape:(1, 3, 32, 32)\nports:0 -> 0", style=solid];
"2 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0"  [label="shape:(6, 3, 5, 5)\nports:0 -> 0", style=solid];
"3 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0"  [label="shape:(6, 3, 5, 5)\nports:0 -> 0", style=solid];
"4 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "5 LeNet/NNCFConv2d[conv1]/conv2d_0"  [label="shape:(6, 3, 5, 5)\nports:0 -> 1", style=solid];
"5 LeNet/NNCFConv2d[conv1]/conv2d_0" -> "6 LeNet/relu_0"  [label="shape:(1, 6, 28, 28)\nports:0 -> 0", style=solid];
"6 LeNet/relu_0" -> "7 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_0|OUTPUT]/symmetric_quantize_0"  [label="shape:(1, 6, 28, 28)\nports:0 -> 0", style=solid];
"7 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_0|OUTPUT]/symmetric_quantize_0" -> "8 LeNet/max_pool2d_0"  [label="shape:(1, 6, 28, 28)\nports:0 -> 0", style=solid];
"8 LeNet/max_pool2d_0" -> "12 LeNet/NNCFConv2d[conv2]/conv2d_0"  [label="shape:(1, 6, 14, 14)\nports:0 -> 0", style=solid];
"9 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0"  [label="shape:(16, 6, 5, 5)\nports:0 -> 0", style=solid];
"10 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0"  [label="shape:(16, 6, 5, 5)\nports:0 -> 0", style=solid];
"11 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "12 LeNet/NNCFConv2d[conv2]/conv2d_0"  [label="shape:(16, 6, 5, 5)\nports:0 -> 1", style=solid];
"12 LeNet/NNCFConv2d[conv2]/conv2d_0" -> "13 LeNet/relu_1"  [label="shape:(1, 16, 10, 10)\nports:0 -> 0", style=solid];
"13 LeNet/relu_1" -> "14 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_1|OUTPUT]/symmetric_quantize_0"  [label="shape:(1, 16, 10, 10)\nports:0 -> 0", style=solid];
"14 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_1|OUTPUT]/symmetric_quantize_0" -> "15 LeNet/max_pool2d_1"  [label="shape:(1, 16, 10, 10)\nports:0 -> 0", style=solid];
"15 LeNet/max_pool2d_1" -> "16 LeNet/view_0"  [label="shape:(1, 16, 5, 5)\nports:0 -> 0", style=solid];
"16 LeNet/view_0" -> "20 LeNet/NNCFLinear[fc1]/linear_0"  [label="shape:(1, 400)\nports:0 -> 0", style=solid];
"17 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0"  [label="shape:(120, 400)\nports:0 -> 0", style=solid];
"18 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0"  [label="shape:(120, 400)\nports:0 -> 0", style=solid];
"19 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "20 LeNet/NNCFLinear[fc1]/linear_0"  [label="shape:(120, 400)\nports:0 -> 1", style=solid];
"20 LeNet/NNCFLinear[fc1]/linear_0" -> "21 LeNet/relu_2"  [label="shape:(1, 120)\nports:0 -> 0", style=solid];
"21 LeNet/relu_2" -> "22 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_2|OUTPUT]/symmetric_quantize_0"  [label="shape:(1, 120)\nports:0 -> 0", style=solid];
"22 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_2|OUTPUT]/symmetric_quantize_0" -> "26 LeNet/NNCFLinear[fc2]/linear_0"  [label="shape:(1, 120)\nports:0 -> 0", style=solid];
"23 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0"  [label="shape:(84, 120)\nports:0 -> 0", style=solid];
"24 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0"  [label="shape:(84, 120)\nports:0 -> 0", style=solid];
"25 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "26 LeNet/NNCFLinear[fc2]/linear_0"  [label="shape:(84, 120)\nports:0 -> 1", style=solid];
"26 LeNet/NNCFLinear[fc2]/linear_0" -> "27 LeNet/relu_3"  [label="shape:(1, 84)\nports:0 -> 0", style=solid];
"27 LeNet/relu_3" -> "28 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_3|OUTPUT]/symmetric_quantize_0"  [label="shape:(1, 84)\nports:0 -> 0", style=solid];
"28 LeNet/NNCFNetworkInterface[_nncf]/ModuleDict[external_quantizers]/SymmetricQuantizer[LeNet/relu_3|OUTPUT]/symmetric_quantize_0" -> "32 LeNet/NNCFLinear[fc3]/linear_0"  [label="shape:(1, 84)\nports:0 -> 0", style=solid];
"29 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0"  [label="shape:(10, 84)\nports:0 -> 0", style=solid];
"30 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0"  [label="shape:(10, 84)\nports:0 -> 0", style=solid];
"31 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "32 LeNet/NNCFLinear[fc3]/linear_0"  [label="shape:(10, 84)\nports:0 -> 1", style=solid];
"32 LeNet/NNCFLinear[fc3]/linear_0" -> "33 /nncf_model_output_0"  [label="shape:(1, 10)\nports:0 -> 0", style=solid];
}
